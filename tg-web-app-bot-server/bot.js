require("dotenv").config();
const TelegramBot = require('node-telegram-bot-api');

let bot = null;
const { userSessions } = require('./sessionStore');

function initBot() {
    if (!bot) {
        bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });

        async function updateKeyboard(chatId, userRole = null) {
            let keyboard = [];

            console.log('updateKeyboard called with role:', userRole);

            const cleanRole = userRole ? userRole.trim().toLowerCase() : null;
            console.log('Cleaned role:', cleanRole);

            if (cleanRole) {
                switch(cleanRole) {
                    case 'admin':
                        console.log('Building keyboard for admin');
                        keyboard = [
                            [{text: '‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', web_app: {url: `${process.env.WEB_APP_URL}/admin`}}],
                            [{text: 'üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã', web_app: {url: `${process.env.WEB_APP_URL}/order`}}],
                            [{text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', web_app: {url: `${process.env.WEB_APP_URL}/stats`}}],
                            [{text: 'üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'}]
                        ];
                        break;
                    case 'user':
                        console.log('Building keyboard for user');
                        keyboard = [
                            [{text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', web_app: {url: `${process.env.WEB_APP_URL}/order`}}],
                            [{text: 'üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'}]
                        ];
                        break;
                    default:
                        console.log('Building keyboard for default role:', cleanRole);
                        keyboard = [
                            [{text: 'üõí –ú–∞–≥–∞–∑–∏–Ω', web_app: {url: `${process.env.WEB_APP_URL}/products`}}],
                            [{text: 'üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'}]
                        ];
                }
            } else {
                console.log('Building keyboard for unauthorized user');
                keyboard = [
                    [{text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'}, {text: '‚ÑπÔ∏è –û –Ω–∞—Å'}],
                    [{text: 'üöÄ –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', web_app: {url: `${process.env.WEB_APP_URL}/form`}}]
                ];
            }

            try {
                console.log('Sending keyboard:', keyboard);
                await bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:', {
                    reply_markup: {
                        keyboard: keyboard,
                        resize_keyboard: true,
                        one_time_keyboard: false
                    }
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', error);
            }
        }

        async function showMainMenu(chatId, userRole) {
            let menuText = '*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n';

            switch(userRole) {
                case 'admin':
                    menuText += '*–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä*\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π';
                    break;
                case 'user':
                    menuText += '*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤';
                    break;
                default:
                    menuText += '*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫';
            }

            try {
                await bot.sendMessage(chatId, menuText, {
                    parse_mode: 'Markdown'
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–Ω—é:', error);
            }
        }

        bot.on('callback_query', async (callbackQuery) => {
            const chatId = callbackQuery.message.chat.id;
            const data = callbackQuery.data;

            try {
                if (data.startsWith('confirm_order_')) {
                    const parts = data.split('_');
                    const queryId = parts[2];
                    const orderId = parts[3];
                    if (orderId && orderId !== 'no_db') {
                        try {
                            await fetch(`http://localhost:8000/api/order/${orderId}/status`, {
                                method: 'PUT',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ status: 'processing' })
                            });
                        } catch (updateError) {
                            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', updateError);
                        }
                    }

                    const userSession = userSessions[chatId];
                    const userAddress = userSession?.userData?.adress || '–∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';

                    await bot.answerWebAppQuery(queryId, {
                        type: 'article',
                        id: queryId,
                        title: '–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
                        input_message_content: {
                            message_text: `‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∞–¥—Ä–µ—Å—É: ${userAddress}\n\n` +
                                `–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderId && orderId !== 'no_db' ? '#' + orderId : '–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î'}\n` +
                                `–°—Ç–∞—Ç—É—Å: –í –æ–±—Ä–∞–±–æ—Ç–∫–µ`
                        }
                    });

                    await bot.editMessageText('‚úÖ *–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!*\n\n–û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏.', {
                        chat_id: chatId,
                        message_id: callbackQuery.message.message_id,
                        parse_mode: 'Markdown'
                    });

                    if (userSession) {
                        userSession.currentOrder = null;
                    }

                } else if (data.startsWith('change_address_')) {
                    await bot.sendMessage(chatId,
                        'üìç *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:*\n\n' +
                        '–§–æ—Ä–º–∞—Ç: –ì–æ—Ä–æ–¥, –£–ª–∏—Ü–∞, –î–æ–º, –ö–≤–∞—Ä—Ç–∏—Ä–∞',
                        { parse_mode: 'Markdown' }
                    );

                    userSessions[chatId].awaitingAddress = true;
                }

                await bot.answerCallbackQuery(callbackQuery.id);

            } catch (error) {
                console.error('Callback error:', error);
                await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        bot.on('message', async (msg) => {
            const chatId = msg.chat.id;
            const text = msg.text;

            console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', { chatId, text });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
            if (userSessions[chatId]?.awaitingAddress && text) {
                try {
                    if (!userSessions[chatId].userData) {
                        userSessions[chatId].userData = {};
                    }
                    userSessions[chatId].userData.address = text;
                    userSessions[chatId].awaitingAddress = false;

                    await bot.sendMessage(chatId,
                        `‚úÖ *–ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω:*\n${text}\n\n` +
                        `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å –Ω–æ–≤—ã–º –∞–¥—Ä–µ—Å–æ–º.`,
                        { parse_mode: 'Markdown' }
                    );
                    return;
                } catch (error) {
                    console.error('Address update error:', error);
                    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞');
                    return;
                }
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            if (!userSessions[chatId] && text) {
                switch(text) {
                    case 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
                        await bot.sendMessage(chatId, 'üì± *–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:*\n\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n‚Ä¢ Email: info@example.com\n‚Ä¢ –ê–¥—Ä–µ—Å: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 123', { parse_mode: 'Markdown' });
                        break;
                    case '‚ÑπÔ∏è –û –Ω–∞—Å':
                        await bot.sendMessage(chatId, 'üè¢ *–û –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:*\n\n–ú—ã –ª—É—á—à–∏–π –º–∞–≥–∞–∑–∏–Ω –≤ –≥–æ—Ä–æ–¥–µ! –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å.', { parse_mode: 'Markdown' });
                        break;
                    case 'üöÄ –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É':
                        await bot.sendMessage(chatId, '–û—Ç–∫—Ä—ã–≤–∞—é —Ñ–æ—Ä–º—É –¥–ª—è –≤—Ö–æ–¥–∞...');
                        break;
                }
            }

            if (userSessions[chatId] && userSessions[chatId].isAuthenticated && text === 'üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã') {
                delete userSessions[chatId];
                await bot.sendMessage(chatId, '*–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!*', { parse_mode: 'Markdown' });
                await updateKeyboard(chatId);
                return;
            }

            if(text === '/start') {
                if (userSessions[chatId] && userSessions[chatId].isAuthenticated) {
                    const userData = userSessions[chatId].userData;
                    await updateKeyboard(chatId, userData.role);
                    await showMainMenu(chatId, userData.role);
                } else {
                    await updateKeyboard(chatId);
                }
            }

            if (msg?.web_app_data?.data) {
                try {
                    const data = JSON.parse(msg.web_app_data.data);
                    console.log('–î–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', data);

                    userSessions[chatId] = {
                        isAuthenticated: true,
                        userData: data,
                        timestamp: Date.now(),
                        awaitingAddress: false
                    };

                    await bot.sendMessage(chatId, '*–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*',);
                    await bot.sendMessage(chatId,
                        `Username: ${data.username}\n` +
                        `Role: ${data.role}` +
                        `${data.email ? `\nEmail: ${data.email}` : ''}` +
                        `${data.adress ? `\nAddress: ${data.adress}` : ''}`,
                    );

                    await updateKeyboard(chatId, data.role);
                    await showMainMenu(chatId, data.role);

                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
                    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
                }
            }

            if (userSessions[chatId] && userSessions[chatId].isAuthenticated) {
                if (text === '/menu') {
                    const userData = userSessions[chatId].userData;
                    await showMainMenu(chatId, userData.role);
                }
                if (text === '/sessions') {
                    const sessionCount = Object.keys(userSessions).length;
                    await bot.sendMessage(chatId, `–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏: ${sessionCount}`);
                }
                if (text === '/debug') {
                    await bot.sendMessage(chatId, `–°–µ—Å—Å–∏—è: ${JSON.stringify(userSessions[chatId], null, 2)}`);
                }
                if (text === '/logout') {
                    delete userSessions[chatId];
                    await bot.sendMessage(chatId, '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
                    await updateKeyboard(chatId);
                }
            }
        });

        bot.on('polling_error', (error) => {
            console.error('Polling error:', error);
        });

        console.log('Telegram bot initialized successfully');
        console.log('WEB_APP_URL:', process.env.WEB_APP_URL);
    }
    return bot;
}

module.exports = { initBot, userSessions };