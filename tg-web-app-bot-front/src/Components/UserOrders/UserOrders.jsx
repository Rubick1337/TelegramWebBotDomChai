import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { fetchOrders, updateOrderStatus } from '../../store/slice/orderSlice';
import './UserOrders.css';

const UserOrders = () => {
    const dispatch = useDispatch();
    const { orders, loading, error, pagination, updateLoading } = useSelector(state => state.orders);
    const [selectedOrder, setSelectedOrder] = useState(null);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [snackbarOpen, setSnackbarOpen] = useState(false);
    const [snackbarMessage, setSnackbarMessage] = useState('');
    const [snackbarSeverity, setSnackbarSeverity] = useState('info');
    const [statusFilter, setStatusFilter] = useState('all');

    const user = JSON.parse(localStorage.getItem('user') || 'null');
    const isAdmin = user?.role === 'admin';
    const userId = user?.id;

    const filteredOrders = React.useMemo(() => {
        if (statusFilter === 'all') return orders;
        return orders.filter(order => order.status === statusFilter);
    }, [orders, statusFilter]);

    useEffect(() => {
        if (isAdmin) {
            // –î–ª—è –∞–¥–º–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
            const params = { page: 1, limit: 10 };
            if (statusFilter !== 'all') params.status = statusFilter;
            dispatch(fetchOrders(params));
        } else if (userId) {
            // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ –∑–∞–∫–∞–∑—ã
            const params = { userId, page: 1, limit: 10 };
            if (statusFilter !== 'all') params.status = statusFilter;
            dispatch(fetchOrders(params));
        }
    }, [dispatch, userId, statusFilter, isAdmin]);

    useEffect(() => {
        if (error) showSnackbar(error, 'error');
    }, [error]);

    const showSnackbar = (message, severity = 'info') => {
        setSnackbarMessage(message);
        setSnackbarSeverity(severity);
        setSnackbarOpen(true);
    };

    const handleCloseSnackbar = () => setSnackbarOpen(false);

    const handlePageChange = (event, page) => {
        if (isAdmin) {
            const params = { page, limit: pagination?.limit || 10 };
            if (statusFilter !== 'all') params.status = statusFilter;
            dispatch(fetchOrders(params));
        } else if (userId) {
            const params = { userId, page, limit: pagination?.limit || 10 };
            if (statusFilter !== 'all') params.status = statusFilter;
            dispatch(fetchOrders(params));
        }
    };

    const handleStatusFilterChange = (event) => setStatusFilter(event.target.value);

    const handleOrderClick = async (order) => {
        try {
            setSelectedOrder(order);
            setIsModalOpen(true);
        } catch (error) {
            showSnackbar('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞', 'error');
        }
    };

    const closeModal = () => {
        setIsModalOpen(false);
        setSelectedOrder(null);
    };

    const handleStatusChange = async (newStatus) => {
        if (!selectedOrder) return;

        try {
            await dispatch(updateOrderStatus({
                id: selectedOrder.id,
                status: newStatus
            })).unwrap();

            showSnackbar('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            setSelectedOrder(prev => ({
                ...prev,
                status: newStatus
            }));

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
            if (isAdmin) {
                const params = { page: pagination?.currentPage || 1, limit: pagination?.limit || 10 };
                if (statusFilter !== 'all') params.status = statusFilter;
                dispatch(fetchOrders(params));
            }

        } catch (error) {
            showSnackbar('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞', 'error');
        }
    };

    const formatDate = (dateString) => {
        return new Date(dateString).toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    };

    const getStatusText = (status) => {
        const statusMap = {
            pending: '–û–∂–∏–¥–∞–Ω–∏–µ',
            processing: '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
            delivered: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
            cancelled: '–û—Ç–º–µ–Ω–µ–Ω'
        };
        return statusMap[status] || status;
    };

    const getStatusColorClass = (status) => {
        const colorMap = {
            pending: 'status-pending',
            processing: 'status-processing',
            delivered: 'status-delivered',
            cancelled: 'status-cancelled'
        };
        return colorMap[status] || 'status-default';
    };

    const getFirstProductImage = (order) => {
        if (order.order_items?.[0]?.product?.img) {
            return `${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/${order.order_items[0].product.img}`;
        }
        return null;
    };

    if (loading && orders.length === 0) {
        return (
            <div className="loading-container">
                <div className="loading-spinner" />
            </div>
        );
    }

    if (!user) {
        return (
            <div className="auth-alert">
                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É
            </div>
        );
    }

    return (
        <div className="user-orders-container">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ñ–∏–ª—å—Ç—Ä */}
            <div className="order-header">
                <div>
                    <h1 className="order-title">
                        {isAdmin ? '–í—Å–µ –∑–∞–∫–∞–∑—ã' : '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'}
                    </h1>
                    <p className="order-subtitle">
                        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.username}! {isAdmin && '(–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)'}
                    </p>
                </div>

                <div className="filter-container">
                    <select
                        value={statusFilter}
                        onChange={handleStatusFilterChange}
                        className="filter-select"
                    >
                        <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                        <option value="pending">–û–∂–∏–¥–∞–Ω–∏–µ</option>
                        <option value="processing">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</option>
                        <option value="delivered">–î–æ—Å—Ç–∞–≤–ª–µ–Ω</option>
                        <option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω</option>
                    </select>
                    <span className="filter-icon">‚ö°</span>
                </div>
            </div>

            {/* –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ */}
            {filteredOrders.length === 0 ? (
                <div className="empty-orders">
                    <div className="empty-icon">üõçÔ∏è</div>
                    <h2 className="empty-title">
                        {statusFilter === 'all' ? '–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ó–∞–∫–∞–∑—ã —Å —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
                    </h2>
                    <p className="empty-text">
                        {statusFilter === 'all'
                            ? (isAdmin ? '–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤' : '–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–¥–µ—Å—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã')
                            : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å'
                        }
                    </p>
                </div>
            ) : (
                <div>
                    {filteredOrders.map((order) => {
                        const imageUrl = getFirstProductImage(order);
                        return (
                            <div
                                key={order.id}
                                onClick={() => handleOrderClick(order)}
                                className="order-card"
                            >
                                <div className="order-content">
                                    <div className="order-grid" style={{
                                        gridTemplateColumns: imageUrl ? '80px 1fr auto' : '1fr auto'
                                    }}>
                                        {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ */}
                                        {imageUrl && (
                                            <img
                                                src={imageUrl}
                                                alt="–¢–æ–≤–∞—Ä"
                                                className="order-image"
                                            />
                                        )}

                                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ */}
                                        <div>
                                            <div className="order-info">
                                                <span className="order-icon">üìã</span>
                                                <h3 className="order-number">–ó–∞–∫–∞–∑ #{order.id}</h3>
                                            </div>

                                            {isAdmin && order.user && (
                                                <div className="user-info" style={{ marginBottom: '8px' }}>
                                                    <span style={{ color: '#666', fontSize: '0.9rem', display: 'flex', alignItems: 'center', gap: '4px' }}>
                                                        üë§ <strong>{order.user.username}</strong>
                                                        {order.user.email && ` (${order.user.email})`}
                                                    </span>
                                                </div>
                                            )}

                                            <p className="order-date">
                                                üìÖ {formatDate(order.date || order.createdAt)}
                                            </p>

                                            <p className="order-items-count">
                                                üõçÔ∏è –¢–æ–≤–∞—Ä–æ–≤: {order.order_items?.length || 0}
                                            </p>

                                            {isAdmin && order.shippingAddress && (
                                                <p className="order-address" style={{ color: '#666', fontSize: '0.8rem', marginTop: '4px' }}>
                                                    üìç {order.shippingAddress}
                                                </p>
                                            )}
                                        </div>

                                        {/* –°—É–º–º–∞ –∏ —Å—Ç–∞—Ç—É—Å */}
                                        <div style={{ textAlign: 'right' }}>
                                            <h2 className="order-amount">
                                                {parseFloat(order.totalAmount || 0).toLocaleString('ru-RU')} ‚ÇΩ
                                            </h2>

                                            <span
                                                className={`status-chip ${getStatusColorClass(order.status)}`}
                                            >
                                                {getStatusText(order.status)}
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        );
                    })}

                    {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
                    {pagination?.totalPages > 1 && (
                        <div className="pagination-container">
                            <div className="pagination-buttons">
                                {Array.from({ length: pagination.totalPages }, (_, i) => i + 1).map(page => (
                                    <button
                                        key={page}
                                        onClick={() => handlePageChange(null, page)}
                                        className={`pagination-button ${pagination.currentPage === page ? 'active' : ''}`}
                                    >
                                        {page}
                                    </button>
                                ))}
                            </div>
                        </div>
                    )}
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞ */}
            {isModalOpen && (
                <div className="modal-overlay">
                    <div className="modal-content">
                        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */}
                        <div className="modal-header">
                            <div className="modal-title">
                                <span style={{ marginRight: '12px' }}>üöö</span>
                                <h2 style={{ margin: 0 }}>–ó–∞–∫–∞–∑ #{selectedOrder?.id}</h2>
                                {isAdmin && selectedOrder?.user && (
                                    <span style={{ marginLeft: '10px', color: 'rgba(255,255,255,0.8)', fontSize: '0.9rem' }}>
                                        üë§ {selectedOrder.user.username}
                                    </span>
                                )}
                            </div>
                            <button
                                onClick={closeModal}
                                className="modal-close"
                            >
                                √ó
                            </button>
                        </div>

                        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */}
                        <div className="modal-body">
                            {selectedOrder && (
                                <div className="modal-grid">
                                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ */}
                                    <div className="info-paper">
                                        <h3 className="section-title">üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</h3>

                                        {isAdmin && selectedOrder.user && (
                                            <div style={{ marginBottom: '16px', padding: '12px', backgroundColor: '#f8f9fa', borderRadius: '8px' }}>
                                                <h4 style={{ margin: '0 0 8px 0', color: '#667eea', fontSize: '1rem' }}>
                                                    üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                                                </h4>
                                                <div style={{ display: 'grid', gap: '6px' }}>
                                                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                                                        <span style={{ color: '#666', fontWeight: 'bold' }}>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</span>
                                                        <span>{selectedOrder.user.username}</span>
                                                    </div>
                                                    {selectedOrder.user.email && (
                                                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                                                            <span style={{ color: '#666', fontWeight: 'bold' }}>Email:</span>
                                                            <span>{selectedOrder.user.email}</span>
                                                        </div>
                                                    )}
                                                    {selectedOrder.user.adress && (
                                                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                                                            <span style={{ color: '#666', fontWeight: 'bold' }}>–ê–¥—Ä–µ—Å:</span>
                                                            <span>{selectedOrder.user.adress}</span>
                                                        </div>
                                                    )}
                                                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                                                        <span style={{ color: '#666', fontWeight: 'bold' }}>–†–æ–ª—å:</span>
                                                        <span style={{
                                                            padding: '2px 8px',
                                                            borderRadius: '12px',
                                                            backgroundColor: selectedOrder.user.role === 'admin' ? '#667eea' : '#28a745',
                                                            color: 'white',
                                                            fontSize: '0.8rem'
                                                        }}>
                                                            {selectedOrder.user.role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        )}

                                        <div className="info-row">
                                            <span className="info-label">–°—Ç–∞—Ç—É—Å:</span>
                                            <span
                                                className={`status-chip ${getStatusColorClass(selectedOrder.status)}`}
                                            >
                                                {getStatusText(selectedOrder.status)}
                                            </span>
                                        </div>

                                        {isAdmin && (
                                            <div style={{ marginBottom: '16px' }}>
                                                <p style={{ color: '#666', margin: '0 0 8px 0' }}>
                                                    –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å:
                                                </p>
                                                <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
                                                    {['pending', 'processing', 'delivered', 'cancelled'].map(status => (
                                                        <button
                                                            key={status}
                                                            onClick={() => handleStatusChange(status)}
                                                            disabled={updateLoading || selectedOrder.status === status}
                                                            style={{
                                                                padding: '6px 12px',
                                                                border: 'none',
                                                                borderRadius: '6px',
                                                                backgroundColor: selectedOrder.status === status ? '#667eea' : '#f0f0f0',
                                                                color: selectedOrder.status === status ? 'white' : '#333',
                                                                cursor: updateLoading ? 'not-allowed' : 'pointer',
                                                                fontSize: '0.8rem',
                                                                opacity: updateLoading ? 0.6 : 1
                                                            }}
                                                        >
                                                            {getStatusText(status)}
                                                        </button>
                                                    ))}
                                                </div>
                                            </div>
                                        )}

                                        <div style={{ marginBottom: '16px' }}>
                                            <p style={{ color: '#666', margin: '0 0 4px 0' }}>
                                                –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:
                                            </p>
                                            <p style={{ margin: 0 }} className="data-order">
                                                {formatDate(selectedOrder.date || selectedOrder.createdAt)}
                                            </p>
                                        </div>

                                        <div>
                                            <p style={{ color: '#666', margin: '0 0 4px 0' }}>
                                                –û–±—â–∞—è —Å—É–º–º–∞:
                                            </p>
                                            <p className="amount-text">
                                                {parseFloat(selectedOrder.totalAmount || 0).toLocaleString('ru-RU')} ‚ÇΩ
                                            </p>
                                        </div>
                                    </div>

                                    {/* –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ */}
                                    <div className="info-paper">
                                        <h3 className="section-title">üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</h3>
                                        <p className="address-text">
                                            {selectedOrder.shippingAddress || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}
                                        </p>
                                    </div>

                                    {/* –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ */}
                                    <div className="info-paper">
                                        <h3 className="section-title">
                                            üõí –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ ({selectedOrder.order_items?.length || 0})
                                        </h3>

                                        <div>
                                            {selectedOrder.order_items?.map((item, index) => {
                                                const product = item.product;
                                                const imageUrl = product?.img ?
                                                    `${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/${product.img}` : null;

                                                return (
                                                    <div key={item.id || index}>
                                                        <div className="item-container">
                                                            {imageUrl && (
                                                                <img
                                                                    src={imageUrl}
                                                                    alt={product?.name}
                                                                    className="order-image"
                                                                />
                                                            )}

                                                            <div style={{ flex: 1 }}>
                                                                <h4 className="item-name">
                                                                    {product?.name || `–¢–æ–≤–∞—Ä #${item.productId}`}
                                                                </h4>

                                                                <p className="item-detail">
                                                                    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity} —à—Ç.
                                                                </p>
                                                                <p className="item-detail">
                                                                    –¶–µ–Ω–∞: {parseFloat(item.price || 0).toLocaleString('ru-RU')} ‚ÇΩ
                                                                </p>
                                                                <p className="item-total">
                                                                    –ò—Ç–æ–≥–æ: {(parseFloat(item.price || 0) * (item.quantity || 1)).toLocaleString('ru-RU')} ‚ÇΩ
                                                                </p>
                                                                {product?.description && (
                                                                    <p className="item-description">
                                                                        {product.description}
                                                                    </p>
                                                                )}
                                                            </div>
                                                        </div>

                                                        {index < selectedOrder.order_items.length - 1 && (
                                                            <hr className="item-divider" />
                                                        )}
                                                    </div>
                                                );
                                            })}
                                        </div>
                                    </div>
                                </div>
                            )}
                        </div>

                        {/* –§—É—Ç–µ—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */}
                        <div className="modal-footer">
                            <button
                                onClick={closeModal}
                                className="close-button"
                            >
                                –ó–∞–∫—Ä—ã—Ç—å
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
            {snackbarOpen && (
                <div className={`snackbar snackbar-${snackbarSeverity}`}>
                    <span>{snackbarMessage}</span>
                    <button
                        onClick={handleCloseSnackbar}
                        className="snackbar-close"
                    >
                        √ó
                    </button>
                </div>
            )}
        </div>
    );
};

export default UserOrders;